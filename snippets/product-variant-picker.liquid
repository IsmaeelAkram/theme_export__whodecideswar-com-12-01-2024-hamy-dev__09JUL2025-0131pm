{% comment %}
  Renders product variant-picker

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  - update_url: {Boolean} whether or not to update url when changing variants. If false, the url isn't updated. Default: true (optional).
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{%- unless product.has_only_default_variant -%}
  {%- if block.settings.picker_type == 'button' -%}
    <variant-radios
      id="variant-radios-{{ section.id }}"
      class="no-js-hidden"
      data-section="{{ section.id }}"
      data-url="{{ product.url }}"
      {% if update_url == false %}
        data-update-url="false"
      {% endif %}
      {{ block.shopify_attributes }}
    >
      {%- for option in product.options_with_values -%}
        <fieldset class="js product-form__input">
          <legend class="form__label">{{ option.name }}</legend>
          {% render 'product-variant-options', product: product, option: option, block: block %}
        </fieldset>
      {%- endfor -%}
      <script type="application/json">
        {{ product.variants | json }}
      </script>
    </variant-radios>
  {%- else -%}
    <variant-selects
      id="variant-selects-{{ section.id }}"
      class="no-js-hidden"
      data-section="{{ section.id }}"
      data-url="{{ product.url }}"
      {% if update_url == false %}
        data-update-url="false"
      {% endif %}
      {{ block.shopify_attributes }}
    >
      {%- for option in product.options_with_values -%}
        <div class="product-form__input product-form__input--dropdown">
          <label class="form__label" for="Option-{{ section.id }}-{{ forloop.index0 }}">
            {{ option.name }}
          </label>
          <div class="select">
            <select
              id="Option-{{ section.id }}-{{ forloop.index0 }}"
              class="select__select"
              name="options[{{ option.name | escape }}]"
              form="{{ product_form_id }}"
            >
              {% render 'product-variant-options', product: product, option: option, block: block %}
            </select>
            {% render 'icon-caret' %}
          </div>
        </div>
      {%- endfor -%}

      <script type="application/json">
        {{ product.variants | json }}
      </script>
    </variant-selects>
  {%- endif -%}
{%- endunless -%}

<noscript class="product-form__noscript-wrapper-{{ section.id }}">
  <div class="product-form__input{% if product.has_only_default_variant %} hidden{% endif %}">
    <label class="form__label" for="Variants-{{ section.id }}">
      {{- 'products.product.product_variants' | t -}}
    </label>
    <div class="select">
      <select
        name="id"
        id="Variants-{{ section.id }}"
        class="select__select"
        form="{{ product_form_id }}"
      >
        {%- for variant in product.variants -%}
          <option
            {% if variant == product.selected_or_first_available_variant %}
              selected="selected"
            {% endif %}
            {% if variant.available == false %}
              disabled
            {% endif %}
            value="{{ variant.id }}"
          >
            {%- liquid
              echo variant.title
              echo variant.price | money | strip_html | prepend: ' - '
              if variant.available == false
                echo 'products.product.sold_out' | t | prepend: ' - '
              endif
              if variant.quantity_rule.increment > 1
                echo 'products.product.quantity.multiples_of' | t: quantity: variant.quantity_rule.increment | prepend: ' - '
              endif
              if variant.quantity_rule.min > 1
                echo 'products.product.quantity.minimum_of' | t: quantity: variant.quantity_rule.min | prepend: ' - '
              endif
              if variant.quantity_rule.max != null
                echo 'products.product.quantity.maximum_of' | t: quantity: variant.quantity_rule.max | prepend: ' - '
              endif
              # TODO: enable theme-check once `item_count_for_variant` is accepted as valid filter
              # theme-check-disable
              assign cart_quantity = cart | item_count_for_variant: variant.id
              # theme-check-enable
              if cart_quantity > 0
                echo 'products.product.quantity.in_cart_html' | t: quantity: cart_quantity | prepend: ' - '
              endif
            -%}
          </option>
        {%- endfor -%}
      </select>
      {% render 'icon-caret' %}
    </div>
  </div>
</noscript>

<script>
// Variant picker redirect and reload
document.addEventListener('DOMContentLoaded', function() {
  // Get variant data from the JSON script
  var variantDataScript = document.querySelector('script[type="application/json"]');
  if (!variantDataScript) return;
  var variants = [];
  try {
    variants = JSON.parse(variantDataScript.textContent);
  } catch (e) {}
  if (!variants.length) return;

  // Helper to find variant by selected options
  function findVariant(selectedOptions) {
    return variants.find(function(variant) {
      return variant.options.every(function(opt, idx) {
        return selectedOptions[idx] === opt;
      });
    });
  }

  // Helper to find variant by ID
  function getVariantById(id) {
    return variants.find(function(variant) { return variant.id == id; });
  }

  // On page load, if ?variant=ID is present, set picker UI to match
  var urlParams = new URLSearchParams(window.location.search);
  var variantId = urlParams.get('variant');
  if (variantId) {
    var variant = getVariantById(variantId);
    if (variant) {
      // Set selects
      document.querySelectorAll('variant-selects').forEach(function(wrapper) {
        var selects = Array.from(wrapper.querySelectorAll('select'));
        variant.options.forEach(function(opt, idx) {
          if (selects[idx]) {
            selects[idx].value = opt;
          }
        });
      });
      // Set radios
      document.querySelectorAll('variant-radios').forEach(function(wrapper) {
        var fieldsets = Array.from(wrapper.querySelectorAll('fieldset'));
        variant.options.forEach(function(opt, idx) {
          var radios = fieldsets[idx] ? fieldsets[idx].querySelectorAll('input[type="radio"]') : [];
          radios.forEach(function(radio) {
            radio.checked = (radio.value === opt);
          });
        });
      });
    }
  }

  // For select dropdowns
  document.querySelectorAll('variant-selects').forEach(function(wrapper) {
    wrapper.querySelectorAll('select').forEach(function(select) {
      select.addEventListener('change', function() {
        var selects = Array.from(wrapper.querySelectorAll('select'));
        var selectedOptions = selects.map(function(s) { return s.value; });
        var variant = findVariant(selectedOptions);
        if (variant && variant.available) {
          window.location.href = wrapper.dataset.url + '?variant=' + variant.id;
        }
      });
    });
  });

  // For radio buttons
  document.querySelectorAll('variant-radios').forEach(function(wrapper) {
    wrapper.querySelectorAll('input[type="radio"]').forEach(function(radio) {
      radio.addEventListener('change', function() {
        var fieldsets = Array.from(wrapper.querySelectorAll('fieldset'));
        var selectedOptions = fieldsets.map(function(fs) {
          var checked = fs.querySelector('input[type="radio"]:checked');
          return checked ? checked.value : null;
        });
        var variant = findVariant(selectedOptions);
        if (variant && variant.available) {
          window.location.href = wrapper.dataset.url + '?variant=' + variant.id;
        }
      });
    });
  });
});
</script>
